import { setErrorProperty } from './set.js'

// Return whether `error.stack` was not generated by `normalize-exception`
export const hasStack = function (error, stack) {
  return getStack(error) === stack
}

// Retrieve `error.stack`.
// Errors can be plain objects with a `stack` property, which is handled by
// `normalize-exception`.
export const getStack = function (error) {
  return typeof error === 'object' && error !== null ? error.stack : undefined
}

// Only show the child error's stack trace since the parent one contains mostly
// the same lines.
// Do not do it if the child error is missing a proper stack trace
//  - Which means if it was generated by `normalize-exception`, since this
//    library fixes them
//  - Unless it has a `cause` which has one
// Merging stacks might lose some stack trace if:
//  - `Error.stackTraceLimit` is too low, in which case it should be increased
//  - Using callbacks, in which case `async`/`await` should be used
export const mergeStack = function (parent, child, childHasStack) {
  if (!childHasStack) {
    return parent
  }

  setErrorProperty(parent, 'stack', child.stack)
  return child
}
