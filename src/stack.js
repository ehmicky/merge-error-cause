import { setErrorProperty } from './set.js'

// List all `error.stack` or `error`, `error.cause`, and so on.
// Handles cycles and errors not being `Error` instances.
export const listStacks = function (error) {
  const parents = []
  listCauseStack(error, parents)
  return parents.map(getStack)
}

const listCauseStack = function (error, parents) {
  // eslint-disable-next-line fp/no-mutating-methods
  parents.push(error)

  if (isObject(error) && 'cause' in error && !parents.includes(error.cause)) {
    listCauseStack(error.cause, parents)
  }
}

const getStack = function (error) {
  return isObject(error) ? error.stack : undefined
}

// Errors can be plain objects with a `stack` property, which is handled by
// `normalize-exception`
const isObject = function (value) {
  return typeof value === 'object' && value !== null
}

// Return whether `error.stack` was generated by `normalize-exception`
export const getGenerated = function (oldStacks, newStacks) {
  return oldStacks.map((oldStack, index) => newStacks[index] !== oldStack)
}

// Only show the child error's stack trace since the parent one contains mostly
// the same lines.
// Do not do it if the child error is missing a proper stack trace.
//  - Unless it has a `cause` which has one
// Merging stacks might lose some stack trace if:
//  - `Error.stackTraceLimit` is too low, in which case it should be increased
//  - Using callbacks, in which case `async`/`await` should be used
export const fixStack = function ({ parent, child, generated, stackIndex }) {
  if (generated[stackIndex + 1] !== true) {
    setErrorProperty(parent, 'stack', child.stack)
  }
}
